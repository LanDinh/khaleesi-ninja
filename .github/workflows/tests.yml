name: tests
on: [push]
jobs:
  # Make data lists available across jobs for use in matrix.
  matrix:
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.set-environments.outputs.json }}
      services: ${{ steps.set-services.outputs.json }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - id: set-environments
        name: Read environments into matrix
        uses: ./.github/actions/set-json-output
        with:
          filename: .github/data/environments.json
      - id: set-services
        name: Read services into matrix
        uses: ./.github/actions/set-json-output
        with:
          filename: .github/data/services.json

  # Test that the kubernetes deployments actually work.
  test-deployment:
    runs-on: ubuntu-latest
    needs: [ matrix ]
    strategy:
      matrix:
        environment: ${{ fromJson(needs.matrix.outputs.environments) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb
          sudo dpkg -i minikube_latest_amd64.deb
          minikube start
      - name: Set up helm
        run: |
          curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
          sudo apt-get install apt-transport-https --yes
          echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
          sudo apt-get update
          sudo apt-get install helm
      - name: Setup protoc
        uses: ./.github/actions/setup-protoc
      - name: Generate protos
        run: ./scripts/development/generate_protos.sh
      - name: Set up the cluster
        run: ./scripts/operations/setup_cluster.sh
      - name: Set up the environment
        run: ./scripts/operations/setup_environment.sh ${{ matrix.environment }}
      - name: Spin up the environment
        run: ./scripts/operations/deploy.sh ${{ matrix.environment }}

  # Execute all tests for all services individually.
  test-all-services:
    runs-on: ubuntu-latest
    needs: [ matrix ]
    strategy:
      matrix:
        service: ${{ fromJson(needs.matrix.outputs.services) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup protoc
        uses: ./.github/actions/setup-protoc
      - name: Generate protos
        run: ./scripts/development/generate_protos.sh
      - name: Execute the container test
        run: ./scripts/development/test.sh ${{ matrix.service.gate }} ${{ matrix.service.service }} ${{ matrix.service.version }}
      - name: Upload coverage to codecov
        if: ${{ always() }}
        uses: codecov/codecov-action@v2
        with:
          flags: integration
          #fail_ci_if_error: true
          directory: temp/
